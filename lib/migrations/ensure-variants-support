// lib/migrations/ensure-variants-support.ts
import { sql } from "@/lib/database"

export async function ensureVariantsSupport() {
  try {
    // Create product_variants table if it doesn't exist
    await sql`
      CREATE TABLE IF NOT EXISTS product_variants (
        id SERIAL PRIMARY KEY,
        product_id INTEGER NOT NULL REFERENCES products(id) ON DELETE CASCADE,
        name VARCHAR(255) NOT NULL,
        price_aed DECIMAL(10,2) DEFAULT 0,
        price_inr DECIMAL(10,2) DEFAULT 0,
        discount_aed DECIMAL(10,2) DEFAULT 0,
        discount_inr DECIMAL(10,2) DEFAULT 0,
        available_aed BOOLEAN DEFAULT TRUE,
        available_inr BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `

    // Add index for better query performance
    await sql`
      CREATE INDEX IF NOT EXISTS idx_product_variants_product_id 
      ON product_variants(product_id);
    `

    // Update products table to support multiple images
    await sql`
      ALTER TABLE products 
      ADD COLUMN IF NOT EXISTS image_urls JSONB DEFAULT '[]'::jsonb;
    `

    // Migrate existing image_url data to image_urls array (only if image_urls is empty and image_url exists)
    await sql`
      UPDATE products 
      SET image_urls = CASE 
        WHEN image_url IS NOT NULL AND image_url != '' AND (image_urls IS NULL OR image_urls = '[]'::jsonb)
        THEN jsonb_build_array(image_url)
        ELSE COALESCE(image_urls, '[]'::jsonb)
      END
      WHERE image_url IS NOT NULL AND image_url != '';
    `

    // Update features column to be JSONB if it's not already
    await sql`
      DO $$ 
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns 
          WHERE table_name = 'products' 
          AND column_name = 'features' 
          AND data_type = 'jsonb'
        ) THEN
          -- If features column exists but is not JSONB, convert it
          IF EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'products' 
            AND column_name = 'features'
          ) THEN
            ALTER TABLE products ALTER COLUMN features TYPE JSONB USING 
              CASE 
                WHEN features IS NULL THEN '[]'::jsonb
                WHEN features = '' THEN '[]'::jsonb
                ELSE features::jsonb
              END;
          ELSE
            -- Add the column if it doesn't exist
            ALTER TABLE products ADD COLUMN features JSONB DEFAULT '[]'::jsonb;
          END IF;
        END IF;
      END $$;
    `

    console.log("Variants support migration completed successfully")
  } catch (error) {
    console.error("Error ensuring variants support:", error)
    throw error
  }
}